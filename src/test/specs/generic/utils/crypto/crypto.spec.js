describe('Crypto', () => {

    /*
     * These vectors were generated by our reference implementation at:
     * https://github.com/dedis/kyber
     */
    const partialSignatureTestVectors = [
        {
            privKeys: [BufferUtils.fromHex("2991781eb707b76c9efb02949ad9c1198a2c82e26064f97ed0c62f3bb269990f"), BufferUtils.fromHex("760e072b36978950f83f602aa6e7297a0612a11a74abec525095c1d4272c8b0a")],
            pubKeys: [BufferUtils.fromHex("598841c72f31653a61d7cf1395fff61e1c9e0079a28a2f3e97ffffd4f361a345"), BufferUtils.fromHex("595fe4e6dde685ee476dac054578666985c086090c274a33d385a926ff19c281")],
            secrets: [BufferUtils.fromHex("7286494dde59783fd343ee8a40d56f007da017872feeda828240ec93f4edd703"), BufferUtils.fromHex("159bf97104571c1bc67e9a230acd584345fbcab0b3578a1962669f98cb4dca07")],
            commitments: [BufferUtils.fromHex("e0ecb1d27ce208c051528b19c6b2ea32dac4211e135dd0e9a99f758f2718305f"), BufferUtils.fromHex("81ebc79f0b49cced1ddc8f4264871dc2453158c538d239415de460f20d468b48")],
            aggCommitment: BufferUtils.fromHex("9579d7172446ab9fb1fd5daf5d203d3bc08ae0cac230d6e964a9d00cfac6d5c7"),
            aggPubKey: BufferUtils.fromHex("7e9a17b2d4ecd879f823afacc0d71aad42d7d7f15e3528d4f66ef54028a5fe6c"),
            partialSignatures: [BufferUtils.fromHex("aac5045cf8dd7e16d717faf71b733ffc4030a9deff5981a43fc3a95095b2ec0a"), BufferUtils.fromHex("7fbf7febf04695619da91675611f14b89387e25a2b5dd2812060acda89669c0a")],
            aggSignature: BufferUtils.fromHex("3cb18eeacec101209e2419ca9e98749fd4b78b392bb753266023562b1f198905"),
            signature: BufferUtils.fromHex("9579d7172446ab9fb1fd5daf5d203d3bc08ae0cac230d6e964a9d00cfac6d5c73cb18eeacec101209e2419ca9e98749fd4b78b392bb753266023562b1f198905"),
            message: BufferUtils.fromAscii("")
        },
        {
            privKeys: [BufferUtils.fromHex("6bdae91b925bed772403bbde5d397b8eba228434caf79d2bed4d42e6dc57760c"), BufferUtils.fromHex("7657f8973f0147e760d08587515f5636ad271bd711911d30ff6195d7f1d73f0a")],
            pubKeys: [BufferUtils.fromHex("70d134f140171efd745c9b12014a80a1b32a3673631242bd4452c4396aa0e092"), BufferUtils.fromHex("cb270e6dd5ec391823a0f6d30f8751ca40337fa012712b3909ce61651b101a7c")],
            secrets: [BufferUtils.fromHex("11f261709c1dc2808ac70a51a59e1bf899db0633618d65561b68e03ee29be00c"), BufferUtils.fromHex("861195c2a25d752ebd9564b855b130bed277d1d1f4a3dff83f4cac001e843203")],
            commitments: [BufferUtils.fromHex("e4677b3eeed02e012272e867d8851f784e29dc836394250b1b724f7cdc714598"), BufferUtils.fromHex("c1b4b96eca923409ae1e0bcdd239956ceacd7079ecb61ae2d92f4c25ab3bb1cd")],
            aggCommitment: BufferUtils.fromHex("2e9e821f704a13f7902f0e921c9aba85985b54df073aa72ded0c9905a1bf3949"),
            aggPubKey: BufferUtils.fromHex("24b13d9cdea5f5211b7b484cc20ae4b5d51b6f0fa326ddb88337370f59a316cc"),
            partialSignatures: [BufferUtils.fromHex("04a09162c89864bf62290a6c0ca18d90b9ef6f31fdaf921737cc03f79bc6910f"), BufferUtils.fromHex("77be32921cef5935500d600d5538188bb9c700298c6ff5797b35b4a9e0e4a10c")],
            aggSignature: BufferUtils.fromHex("8e8ace97ca24ac9cdc9972d682dfc60673b7705a891f8891b201b8a07cab330c"),
            signature: BufferUtils.fromHex("2e9e821f704a13f7902f0e921c9aba85985b54df073aa72ded0c9905a1bf39498e8ace97ca24ac9cdc9972d682dfc60673b7705a891f8891b201b8a07cab330c"),
            message: BufferUtils.fromAscii("Hello World")
        },
        {
            privKeys: [BufferUtils.fromHex("88d85f69e3a04436dae191107056e45fadd01cf429ee2e9aa52de38e53f5520f"), BufferUtils.fromHex("8450effdbe2daea0902d25f9ab4c7481cfbd7a97d3ee6ab6acf0b0d364e77e02"), BufferUtils.fromHex("51b34428453e4f232b3da5de2eae244452b1bd1bd56477e49356934dbcb5540b"), BufferUtils.fromHex("07342fadba28fe616e7edd659e22875abe2a2270a158aba5358fa4459dc9a10f")],
            pubKeys: [BufferUtils.fromHex("a56c7dd6961d29688d19049e7bde69a3f7c23deeeeaced91b0e784569e34a12c"), BufferUtils.fromHex("b5c8d46f531a07f93fb3e0ba0be519e906a3094381178de818dce6aec0aafacd"), BufferUtils.fromHex("8168cf1c1a2558d03f1a5e678c4051239455e0db74117a311c2c47fdc19a94d8"), BufferUtils.fromHex("dac736ed87dc884270e027f67290ecddef5d6b8ac3277e361e277dc467bbc6e0")],
            secrets: [BufferUtils.fromHex("5a8dac1429fa2ee944f9ca5d578db7beb40afa34229c27c69bc5fff1cc240703"), BufferUtils.fromHex("2e17352851a393e1b2eaa1086cce9c61fd022aa7146dbd660af974d33ff00b0c"), BufferUtils.fromHex("cb2cbf04fb51b94a3f4c7cd6ee713891e2d54abfac78d62ae696e37be2d8640a"), BufferUtils.fromHex("b4ad3a1d3cef4346dd89ef69f3a364a75020603c3a5c5671ba70eabf6f0e1f04")],
            commitments: [BufferUtils.fromHex("739acfb026a1e6e81ebf95720d9d3b062cc0575d13a84416ebd381c5cd2462f9"), BufferUtils.fromHex("7b713028433669c37b75df0b62c2b01de3e1554cec2d4f97f9a258246fc54142"), BufferUtils.fromHex("ee73e6895d0551dff07dccb96bb5f2e226d6951b58b16209e1ba21cad32e4362"), BufferUtils.fromHex("a74e2d776245db609ee34eb42f16113407ebbc017532d75f1a23e7bc52919564")],
            aggCommitment: BufferUtils.fromHex("ace91f70e9a78f769bec6cc448343778884e689bf110cc512ee5878be5361e67"),
            aggPubKey: BufferUtils.fromHex("e9ee67553f9ca0e562a9b5cc06cfea1bdd65148920cfb5bbee7a15bf40153a49"),
            partialSignatures: [BufferUtils.fromHex("206257a2a64b7b8d465cd4bfb52240dcb4814f12125b3b59c48fe8cf7151b405"), BufferUtils.fromHex("59d74b1f2bd881ef2007da82c4dbb39188273e752a78b1285ded74e535e33102"), BufferUtils.fromHex("7648283e6131334a660cef7fb7adb7951c1f53aa162ab9bdd990b67e12a71706"), BufferUtils.fromHex("89c916e3016195d526396f771599535d440dae9f7ec5dcabc6bf633a1eccc400")],
            aggSignature: BufferUtils.fromHex("784be2e234b6c59cf4a80c3a4745ff609ed58ed1d1c282ebc1cd776ed8a7c20e"),
            signature: BufferUtils.fromHex("ace91f70e9a78f769bec6cc448343778884e689bf110cc512ee5878be5361e67784be2e234b6c59cf4a80c3a4745ff609ed58ed1d1c282ebc1cd776ed8a7c20e"),
            message: BufferUtils.fromAscii("")
        },
        {
            privKeys: [BufferUtils.fromHex("35d742e4b53993a977f8a82638bb11113b2397c57bea78c0ebb351a4bac0e006"), BufferUtils.fromHex("1100623b414e99062388def89636d47d553386f6731f15d2efadc0f584d22809"), BufferUtils.fromHex("c7c9a562fa91c56b1ca74b266f0142e735c425cd666dacfbb1ca12ee872c2609"), BufferUtils.fromHex("4892fc16e56693c3069c6b030de85c91057b886bb122568404c92327b4524603")],
            pubKeys: [BufferUtils.fromHex("c2b06f0c3f6aa1dda5924d7ca67a666e5d6a901f7209a78e34c7b251ff0bbe41"), BufferUtils.fromHex("8c90258f7744977450f76c56a9340b02edc85e1681157257ec99ecbe6ac94a03"), BufferUtils.fromHex("8dadcec0af4aa3a808eb022a14ad5ae93dffec173d461461d84d14819dd2ad2e"), BufferUtils.fromHex("c8838f2cfb103e159bdf6aabc5249d82b081103196e4767d364a563633bf1766")],
            secrets: [BufferUtils.fromHex("55c1944de3696b5a71d5e73ff6a10b06506ae91dd06d4e67e800538202b05301"), BufferUtils.fromHex("273e73bcf07e5cb468edb653094ac240545ffa23711c8aff06c72e1d7616de09"), BufferUtils.fromHex("f2e337d4ba0aeed16e7f7f1755da5780dfc42899bb3e8129c8b7cbd8409e420e"), BufferUtils.fromHex("ecf217452b462b5bd4b40bce0919a969fab65f41b40de1a7bb81f80aeb148108")],
            commitments: [BufferUtils.fromHex("92252089fe2ea1b154c6b03e49a5b71cf0f5485d6bd544ac15b78c5e6e56df4c"), BufferUtils.fromHex("9ff13b3d1d87f9df15569120b2b226199758a18b6210dabde65440163c0aca6c"), BufferUtils.fromHex("dc6c7318907d1e857a279d46c2b4a748f8bc1373bd1b03f2a025c29305a6f78a"), BufferUtils.fromHex("5f71fc3b8c4cd71c87a7b21bf1eb52dccaed26313ea30ab9245b8a2b2c67b5af")],
            aggCommitment: BufferUtils.fromHex("8034f1b2e0c7ca646ecc491ac1d85cc45f72d8472e039953a061c868d393ee65"),
            aggPubKey: BufferUtils.fromHex("b0368feb70abfdb7d1b83d50943e34fd37d15ac3848a594ea0584f3485ff032b"),
            partialSignatures: [BufferUtils.fromHex("19dbcceb47200e3980735cc3c45ecb38089ad49de9b02b3fd77f5a45e022a000"), BufferUtils.fromHex("3c620b1e5dbcf19bf5ebdd0cac2cf1dcc31884f0ffdda1c89faa498acd43e40e"), BufferUtils.fromHex("132d6fc0d5fbec8d425fecba9a4b4f118fc77fbfd15a6b8aa082afa6e389c701"), BufferUtils.fromHex("be15392a82dea151d5eab39d8a9fbb2406953e0e2af0aaa4b654e00271dabd01")],
            aggSignature: BufferUtils.fromHex("39ac8a97e2537c5cb70ce385b77ce836610f175ce5d9e336ce01347902cb0903"),
            signature: BufferUtils.fromHex("8034f1b2e0c7ca646ecc491ac1d85cc45f72d8472e039953a061c868d393ee6539ac8a97e2537c5cb70ce385b77ce836610f175ce5d9e336ce01347902cb0903"),
            message: BufferUtils.fromAscii("Hello World")
        }
    ];

    it('can create keys of proposed size', (done) => {
        (async function () {
            const keyPair = await Crypto.keyPairGenerate();
            expect(Crypto.publicKeySerialize(Crypto.keyPairPublic(keyPair)).byteLength).toEqual(Crypto.publicKeySize);
            expect(Crypto.privateKeySerialize(Crypto.keyPairPrivate(keyPair)).byteLength).toEqual(Crypto.privateKeySize);
        })().then(done, done.fail);
    });

    it('can serialize, unserialize keys and use them afterwards', (done) => {
        (async function () {
            const keyPair = await Crypto.keyPairGenerate();
            const data = new Uint8Array([1, 2, 3]);
            const data2 = new Uint8Array([1, 2, 4]);
            const privateSerialized = Crypto.privateKeySerialize(Crypto.keyPairPrivate(keyPair));
            const publicSerialized = Crypto.publicKeySerialize(Crypto.keyPairPublic(keyPair));
            const sign = await Crypto.signatureCreate(Crypto.keyPairPrivate(keyPair), Crypto.keyPairPublic(keyPair), data);
            const verify = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair), data, sign);
            const falsify = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair), data2, sign);

            const privateUnserialized = Crypto.privateKeyUnserialize(privateSerialized);
            const publicUnserialized = Crypto.publicKeyUnserialize(publicSerialized);

            const verify2 = await Crypto.signatureVerify(publicUnserialized, data, sign);
            expect(verify2).toBe(verify);

            const falsify2 = await Crypto.signatureVerify(publicUnserialized, data2, sign);
            expect(falsify2).toBe(falsify);

            const sign2 = await Crypto.signatureCreate(privateUnserialized, publicUnserialized, data);
            expect(sign2.length).toBe(sign.length);
        })().then(done, done.fail);
    });

    it('can derive a functional key pair from private key', (done) => {
        (async function () {
            const keyPair = await Crypto.keyPairGenerate();
            const data = new Uint8Array([1, 2, 3]);
            const keyPair2 = await Crypto.keyPairDerive(Crypto.keyPairPrivate(keyPair));

            const sign = await Crypto.signatureCreate(Crypto.keyPairPrivate(keyPair), Crypto.keyPairPublic(keyPair), data);
            const verify = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair), data, sign);
            expect(verify).toBe(true, 'can verify original with original key');
            const verify2 = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair2), data, sign);
            expect(verify2).toBe(true, 'can verify original with derived key');

            const sign2 = await Crypto.signatureCreate(Crypto.keyPairPrivate(keyPair2), Crypto.keyPairPublic(keyPair2), data);
            const verify3 = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair), data, sign2);
            expect(verify3).toBe(true, 'can verify derived with original key');
            const verify4 = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair2), data, sign2);
            expect(verify4).toBe(true, 'can verify derived with derived key');
        })().then(done, done.fail);
    });

    it('can verify RFC8032 test vectors', (done) => {
        // For the test vectors see https://tools.ietf.org/html/rfc8032#page-24
        // For a test of all test vectors see: https://github.com/danimoh/ed25519/tree/master/test
        function hexToBytes(hexString) {
            const byteCount = hexString.length / 2; // 2 hex chars per byte
            const result = new Uint8Array(byteCount);
            for (let i=0; i<byteCount; ++i) {
                result[i] = parseInt(hexString.substr(i * 2, 2), 16);
            }
            return result;
        }

        (async function () {
            const testCases = [
                {
                    priv: '9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60',
                    pub: 'd75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a',
                    sig: 'e5564300c360ac729086e2cc806e828a84877f1eb8e5d974d873e065224901555fb8821590a33bacc61e39701cf9b46bd25bf5f0595bbe24655141438e7a100b',
                    msg: ''
                }, {
                    priv: '4ccd089b28ff96da9db6c346ec114e0f5b8a319f35aba624da8cf6ed4fb8a6fb',
                    pub: '3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c',
                    sig: '92a009a9f0d4cab8720e820b5f642540a2b27b5416503f8fb3762223ebdb69da085ac1e43e15996e458f3613d0f11d8c387b2eaeb4302aeeb00d291612bb0c00',
                    msg: '72'
                }, {
                    priv: 'c5aa8df43f9f837bedb7442f31dcb7b166d38535076f094b85ce3a2e0b4458f7',
                    pub: 'fc51cd8e6218a1a38da47ed00230f0580816ed13ba3303ac5deb911548908025',
                    sig: '6291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a',
                    msg: 'af82'
                }, {
                    priv: 'f5e5767cf153319517630f226876b86c8160cc583bc013744c6bf255f5cc0ee5',
                    pub: '278117fc144c72340f67d0f2316e8386ceffbf2b2428c9c51fef7c597f1d426e',
                    sig: '0aab4c900501b3e24d7cdf4663326a3a87df5e4843b2cbdb67cbf6e460fec350aa5371b1508f9f4528ecea23c436d94b5e8fcd4f681e30a6ac00a9704a188a03',
                    msg: '08b8b2b733424243760fe426a4b54908632110a66c2f6591eabd3345e3e4eb98fa6e264bf09efe12ee50f8f54e9f77b1e355f6c50544e23fb1433ddf73be84d879de7c0046dc4996d9e773f4bc9efe5738829adb26c81b37c93a1b270b20329d658675fc6ea534e0810a4432826bf58c941efb65d57a338bbd2e26640f89ffbc1a858efcb8550ee3a5e1998bd177e93a7363c344fe6b199ee5d02e82d522c4feba15452f80288a821a579116ec6dad2b3b310da903401aa62100ab5d1a36553e06203b33890cc9b832f79ef80560ccb9a39ce767967ed628c6ad573cb116dbefefd75499da96bd68a8a97b928a8bbc103b6621fcde2beca1231d206be6cd9ec7aff6f6c94fcd7204ed3455c68c83f4a41da4af2b74ef5c53f1d8ac70bdcb7ed185ce81bd84359d44254d95629e9855a94a7c1958d1f8ada5d0532ed8a5aa3fb2d17ba70eb6248e594e1a2297acbbb39d502f1a8c6eb6f1ce22b3de1a1f40cc24554119a831a9aad6079cad88425de6bde1a9187ebb6092cf67bf2b13fd65f27088d78b7e883c8759d2c4f5c65adb7553878ad575f9fad878e80a0c9ba63bcbcc2732e69485bbc9c90bfbd62481d9089beccf80cfe2df16a2cf65bd92dd597b0707e0917af48bbb75fed413d238f5555a7a569d80c3414a8d0859dc65a46128bab27af87a71314f318c782b23ebfe808b82b0ce26401d2e22f04d83d1255dc51addd3b75a2b1ae0784504df543af8969be3ea7082ff7fc9888c144da2af58429ec96031dbcad3dad9af0dcbaaaf268cb8fcffead94f3c7ca495e056a9b47acdb751fb73e666c6c655ade8297297d07ad1ba5e43f1bca32301651339e22904cc8c42f58c30c04aafdb038dda0847dd988dcda6f3bfd15c4b4c4525004aa06eeff8ca61783aacec57fb3d1f92b0fe2fd1a85f6724517b65e614ad6808d6f6ee34dff7310fdc82aebfd904b01e1dc54b2927094b2db68d6f903b68401adebf5a7e08d78ff4ef5d63653a65040cf9bfd4aca7984a74d37145986780fc0b16ac451649de6188a7dbdf191f64b5fc5e2ab47b57f7f7276cd419c17a3ca8e1b939ae49e488acba6b965610b5480109c8b17b80e1b7b750dfc7598d5d5011fd2dcc5600a32ef5b52a1ecc820e308aa342721aac0943bf6686b64b2579376504ccc493d97e6aed3fb0f9cd71a43dd497f01f17c0e2cb3797aa2a2f256656168e6c496afc5fb93246f6b1116398a346f1a641f3b041e989f7914f90cc2c7fff357876e506b50d334ba77c225bc307ba537152f3f1610e4eafe595f6d9d90d11faa933a15ef1369546868a7f3a45a96768d40fd9d03412c091c6315cf4fde7cb68606937380db2eaaa707b4c4185c32eddcdd306705e4dc1ffc872eeee475a64dfac86aba41c0618983f8741c5ef68d3a101e8a3b8cac60c905c15fc910840b94c00a0b9d0'
                }, {
                    // this test case is taken from https://tools.ietf.org/html/rfc8032#page-27
                    priv: '833fe62409237b9d62ec77587520911e9a759cec1d19755b7da901b96dca3d42',
                    pub: 'ec172b93ad5e563bf4932c70e1245034c35467ef2efd4d64ebf819683467e2bf',
                    sig: 'dc2a4459e7369633a52b1bf277839a00201009a3efbf3ecb69bea2186c26b58909351fc9ac90b3ecfdfbc7c66431e0303dca179c138ac17ad9bef1177331a704',
                    msg: 'ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f'
                }
            ];

            for (const testCase of testCases) {
                /* eslint-disable no-await-in-loop */
                const privateKey = hexToBytes(testCase.priv);
                const referencePublicKey = hexToBytes(testCase.pub);
                const referenceSignature = hexToBytes(testCase.sig);
                const message = hexToBytes(testCase.msg);

                const computedPublicKey = await Crypto.publicKeyDerive(privateKey);
                expect(BufferUtils.equals(referencePublicKey, computedPublicKey)).toBe(true, 'calculated wrong public key');

                const computedSignature = await Crypto.signatureCreate(privateKey, referencePublicKey, message);
                expect(BufferUtils.equals(referenceSignature, computedSignature)).toBe(true, 'calculated wrong signature');

                expect(await Crypto.signatureVerify(referencePublicKey, message, referenceSignature)).toBe(true, 'could not verify valid signature');

                // try whether the signature also verifies for a manipulated message
                let forgedMessage;
                if (message.byteLength === 0) {
                    forgedMessage = new Uint8Array([42]);
                } else {
                    // change the last byte as in http://ed25519.cr.yp.to/python/sign.py
                    forgedMessage = new Uint8Array(message);
                    forgedMessage[forgedMessage.length-1]++;
                }
                expect(await Crypto.signatureVerify(referencePublicKey, forgedMessage, referenceSignature)).toBe(false, 'Accepted signature for wrong message');

                // try whether a manipulated signature verifies the original message
                // change a single bit of a single byte
                computedSignature[Math.floor(Math.random() * Crypto.signatureSize)] ^= 1 << (Math.floor(Math.random() * 8));
                expect(await Crypto.signatureVerify(referencePublicKey, forgedMessage, referenceSignature)).toBe(false, 'Accepted wrong signature');
                /* eslint-enable no-await-in-loop */
            }
        })().then(done, done.fail);
    });

    it('can verify custom signature set', (done) => {
        (async function () {
            const testData = [
                [
                    '/wkQNXvCZ5/y1Sw/JjtQP8AliE552VZJxqRmyYqvKoP2HJ+odLyneb3b4f45VlRj/+NGKTpysWVgyMkfdo0zDg==', // signature
                    'W8uW2Jrl/pfj3JfJWWTYVeL2E/TobX+yipKxFLeVfGU=', // pub key
                    'AAF2F6Gc0OZmc8W/5CRs1A0G0Y+s7QK+4oBhQTYHJ8jHr50cj2/StGARCqGkqNKvGoi6xom8JPmxOdsvQUjIfenWztto/gO1+//6q+jM1LHWoTl4BL1Br1HZegAAAEGfUdl4AAAAAAAAAg==' // data
                ],
                [
                    'rA3GsMGnrTTnfSaQM5qcKfxGWeQXvIFIl5TA+DJVTXK+Rm2lkQcF8XIb/fMnMznchRHh/O34n7yxN2F+X5niBg==',
                    'c7+7HyyPJntaosgJJhjtncRiiQx1Qm7xceih1FZukE0=',
                    'AAEAUCcJnHMAKL3oovwLVzrimvAElh5YHi07RQLO4ZXCxdIbEvjxV0ilfWBcq9BObQGyTLhbt04/SaDl2j4XC1mSHouh62k1wVYQkY9TFDgqnJiuvP7nQfKgXyAAAAAAAAAAAAAAAAAAAAE='
                ]
            ];

            for (const entry of testData) {
                expect(await Crypto.signatureVerify(
                    Crypto.publicKeyUnserialize(BufferUtils.fromBase64(entry[1])),
                    BufferUtils.fromBase64(entry[2]),
                    Crypto.signatureUnserialize(BufferUtils.fromBase64(entry[0])))
                ).toBeTruthy();
            }
        })().then(done, done.fail);
    });

    it('can sign and verify data', (done) => {
        // http://www.ietf.org/rfc/rfc6090.txt
        (async function () {
            const dataToSign = BufferUtils.fromAscii('test data to sign');
            const keyPair = await Crypto.keyPairGenerate();
            const signature = await Crypto.signatureCreate(Crypto.keyPairPrivate(keyPair), Crypto.keyPairPublic(keyPair), dataToSign);
            const proof = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair), dataToSign, signature);
            expect(proof).toEqual(true);
        })().then(done, done.fail);
    });

    it('can verify serialized signature', (done) => {
        (async function () {
            const dataToSign = BufferUtils.fromAscii('test data to sign');
            const keyPair = await Crypto.keyPairGenerate();
            const signature = await Crypto.signatureCreate(Crypto.keyPairPrivate(keyPair), Crypto.keyPairPublic(keyPair), dataToSign);
            const proof = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair), dataToSign, Crypto.signatureUnserialize(Crypto.signatureSerialize(signature)));
            expect(proof).toEqual(true);
        })().then(done, done.fail);
    });

    it('can detect wrong signatures', (done) => {
        (async function () {
            const dataToSign = BufferUtils.fromAscii('test data to sign');
            const wrongData = BufferUtils.fromAscii('wrong test data to sign');
            const keyPair = await Crypto.keyPairGenerate();
            const signature = await Crypto.signatureCreate(Crypto.keyPairPrivate(keyPair), Crypto.keyPairPublic(keyPair), dataToSign);
            const proof = await Crypto.signatureVerify(Crypto.keyPairPublic(keyPair), wrongData, signature);
            expect(proof).toEqual(false);
        })().then(done, done.fail);
    });

    it('can hash data with blake2b', (done) => {
        (async function () {
            const dataToHash = BufferUtils.fromAscii('hello');
            const expectedHash = Dummy.hash1;
            const hash = await Crypto.hashLight(dataToHash);
            expect(BufferUtils.toBase64(hash)).toBe(expectedHash);
        })().then(done, done.fail);
    });

    it('correctly aggregates public keys', (done) => {
        (async function () {
            for (const testCase of partialSignatureTestVectors) {
                const aggPubKey = await Crypto.sumPublicKeys(...testCase.pubKeys);
                expect(BufferUtils.equals(aggPubKey, testCase.aggPubKey)).toBe(true);
            }
        })().then(done, done.fail);
    });

    it('correctly aggregates commitments', (done) => {
        (async function () {
            for (const testCase of partialSignatureTestVectors) {
                const aggCommitment = await Crypto.sumCommitments(...testCase.commitments);
                expect(BufferUtils.equals(aggCommitment, testCase.aggCommitment)).toBe(true);
            }
        })().then(done, done.fail);
    });

    it('correctly aggregates partial signatures', (done) => {
        (async function () {
            for (const testCase of partialSignatureTestVectors) {
                const aggSignatures = await Crypto.sumPartialSignatures(...testCase.partialSignatures);
                expect(BufferUtils.equals(aggSignatures, testCase.aggSignature)).toBe(true);
            }
        })().then(done, done.fail);
    });

    it('correctly computes partial signatures', (done) => {
        (async function () {
            for (const testCase of partialSignatureTestVectors) {
                for (let i = 0; i < testCase.pubKeys.length; ++i) {
                    const partialSignature = await Crypto.partialSignatureCreate(testCase.privKeys[i], testCase.aggPubKey, testCase.secrets[i], testCase.aggCommitment, testCase.message);
                    expect(BufferUtils.equals(partialSignature, testCase.partialSignatures[i])).toBe(true);
                }
            }
        })().then(done, done.fail);
    });

    it('correctly computes and verifies signatures', (done) => {
        (async function () {
            for (const testCase of partialSignatureTestVectors) {
                const signature = await Crypto.combinePartialSignatures(testCase.aggCommitment, ...testCase.partialSignatures);
                expect(BufferUtils.equals(signature, testCase.signature)).toBe(true, 'could not compute signature correctly');
                expect(await Crypto.signatureVerify(testCase.aggPubKey, testCase.message, signature)).toBe(true, 'could not verify signature');
            }
        })().then(done, done.fail);
    });

    it('can create valid signatures', (done) => {
        (async function () {
            const message = BufferUtils.fromAscii('to be authenticated');
            const pubKeys = [], privKeys = [], secrets = [], commitments = [], partialSignatures = [];
            for (let i = 0; i < 3; ++i) {
                const keyPair = await Crypto.keyPairGenerate();
                const nonce = await Crypto.noncePairGenerate();

                pubKeys.push(keyPair.publicKey);
                privKeys.push(keyPair.privateKey);
                secrets.push(nonce.secret);
                commitments.push(nonce.commitment);
            }
            const aggPubKey = await Crypto.sumPublicKeys(...pubKeys);
            const aggCommitment = await Crypto.sumCommitments(...commitments);
            for (let i = 0; i < 3; ++i) {
                const partialSignature = await Crypto.partialSignatureCreate(privKeys[i], aggPubKey, secrets[i], aggCommitment, message);
                partialSignatures.push(partialSignature);
            }

            const signature = await Crypto.combinePartialSignatures(aggCommitment, ...partialSignatures);
            expect(await Crypto.signatureVerify(aggPubKey, message, signature)).toBe(true);
        })().then(done, done.fail);
    });
});
